name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'custom-entrypoint.sh'
      - 'wp-content/**'
      - '.github/workflows/deploy.yml'
    paths-ignore:
      - '**.md'
      - 'README.md'
      - 'DEVOPS_BEST_PRACTICES.md'
      - '**.sh'
      - '!custom-entrypoint.sh'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: northamerica-northeast1
  SERVICE_NAME: wordpress-hello-world

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Authenticate with Service Account
        run: |
          echo "Activating service account..."
          echo '${{ secrets.GCP_SA_KEY }}' > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud config set project ${PROJECT_ID}
          echo "✅ Service account activated"
          gcloud config list

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Verify Service Account Permissions
        run: |
          echo "==================================================="
          echo "Verifying Service Account Permissions"
          echo "==================================================="
          
          # Extract service account email from the credentials
          SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
          echo "Service Account: ${SA_EMAIL}"
          echo ""
          
          # Verify we got the email
          if [ -z "${SA_EMAIL}" ] || [ "${SA_EMAIL}" = "null" ]; then
            echo "⚠️  WARNING: Could not extract service account email from credentials"
            echo "Skipping permission check..."
          else
            # Try to check IAM policy for the service account
            echo "Checking IAM roles..."
            if ROLES=$(gcloud projects get-iam-policy ${PROJECT_ID} \
              --flatten="bindings[].members" \
              --filter="bindings.members:serviceAccount:${SA_EMAIL}" \
              --format="value(bindings.role)" 2>&1); then
              
              echo "Current roles:"
              echo "${ROLES}"
              echo ""
              
              # Check for required roles
              MISSING_ROLES=()
              
              if ! echo "${ROLES}" | grep -q "roles/artifactregistry.writer\|roles/artifactregistry.admin\|roles/editor\|roles/owner"; then
                MISSING_ROLES+=("roles/artifactregistry.writer")
                echo "⚠️  Missing: Artifact Registry Writer"
              else
                echo "✅ Artifact Registry Writer"
              fi
              
              if ! echo "${ROLES}" | grep -q "roles/run.admin\|roles/editor\|roles/owner"; then
                MISSING_ROLES+=("roles/run.admin")
                echo "⚠️  Missing: Cloud Run Admin"
              else
                echo "✅ Cloud Run Admin"
              fi
              
              if ! echo "${ROLES}" | grep -q "roles/iam.serviceAccountUser\|roles/editor\|roles/owner"; then
                MISSING_ROLES+=("roles/iam.serviceAccountUser")
                echo "⚠️  Missing: Service Account User"
              else
                echo "✅ Service Account User"
              fi
              
              if ! echo "${ROLES}" | grep -q "roles/cloudsql.client\|roles/editor\|roles/owner"; then
                MISSING_ROLES+=("roles/cloudsql.client")
                echo "⚠️  Missing: Cloud SQL Client"
              else
                echo "✅ Cloud SQL Client"
              fi
              
              echo ""
              
              if [ ${#MISSING_ROLES[@]} -gt 0 ]; then
                echo "⚠️  WARNING: Some permissions may be missing!"
                echo "If deployment fails, grant these permissions:"
                echo ""
                for role in "${MISSING_ROLES[@]}"; do
                  echo "gcloud projects add-iam-policy-binding ${PROJECT_ID} \\"
                  echo "  --member=\"serviceAccount:${SA_EMAIL}\" \\"
                  echo "  --role=\"${role}\""
                  echo ""
                done
                echo "Continuing deployment anyway..."
              else
                echo "✅ All required permissions verified!"
              fi
            else
              echo "⚠️  WARNING: Could not check IAM permissions"
              echo "Service account may not have 'resourcemanager.projects.getIamPolicy' permission"
              echo "This is OK - deployment will fail later if actual permissions are missing"
              echo ""
              echo "Continuing deployment..."
            fi
          fi
          
          echo "==================================================="

      - name: Verify Artifact Registry repository exists
        run: |
          echo "Checking if Artifact Registry repository exists..."
          echo "Repository: wordpress"
          echo "Location: ${REGION}"
          
          if gcloud artifacts repositories describe wordpress \
            --location="${REGION}" \
            --format="value(name)" &>/dev/null; then
            echo "✅ Repository 'wordpress' exists in ${REGION}"
          else
            echo "❌ ERROR: Repository 'wordpress' does not exist in ${REGION}"
            echo ""
            echo "Create it with:"
            echo "gcloud artifacts repositories create wordpress \\"
            echo "  --repository-format=docker \\"
            echo "  --location=${REGION} \\"
            echo "  --description='WordPress Docker images'"
            exit 1
          fi
          
          echo ""
          echo "Image will be pushed to:"
          echo "${REGION}-docker.pkg.dev/${PROJECT_ID}/wordpress/${SERVICE_NAME}"

      - name: Build Docker image
        run: |
          IMAGE_BASE="${REGION}-docker.pkg.dev/${PROJECT_ID}/wordpress/${SERVICE_NAME}"
          docker build -t ${IMAGE_BASE}:${GITHUB_SHA} \
                       -t ${IMAGE_BASE}:latest \
                       -f Dockerfile .

      - name: Push Docker image to Artifact Registry
        run: |
          IMAGE_BASE="${REGION}-docker.pkg.dev/${PROJECT_ID}/wordpress/${SERVICE_NAME}"
          docker push ${IMAGE_BASE}:${GITHUB_SHA}
          docker push ${IMAGE_BASE}:latest

      - name: Deploy to Cloud Run
        env:
          WORDPRESS_DB_HOST: ${{ secrets.WORDPRESS_DB_HOST }}
          WORDPRESS_DB_USER: ${{ secrets.WORDPRESS_DB_USER }}
          WORDPRESS_DB_PASSWORD: ${{ secrets.WORDPRESS_DB_PASSWORD }}
          WORDPRESS_DB_NAME: ${{ secrets.WORDPRESS_DB_NAME }}
          WP_ADMIN_USER: ${{ secrets.WP_ADMIN_USER }}
          WP_ADMIN_PASS: ${{ secrets.WP_ADMIN_PASS }}
          WP_ADMIN_EMAIL: ${{ secrets.WP_ADMIN_EMAIL }}
          WP_URL: ${{ secrets.WP_URL }}
          WP_TITLE: ${{ secrets.WP_TITLE }}
          CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
        run: |
          # Build environment variables safely
          ENV_VARS="WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}"
          ENV_VARS="${ENV_VARS},WORDPRESS_DB_USER=${WORDPRESS_DB_USER}"
          ENV_VARS="${ENV_VARS},WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}"
          ENV_VARS="${ENV_VARS},WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}"
          ENV_VARS="${ENV_VARS},WP_ADMIN_USER=${WP_ADMIN_USER}"
          ENV_VARS="${ENV_VARS},WP_ADMIN_PASS=${WP_ADMIN_PASS}"
          ENV_VARS="${ENV_VARS},WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}"
          ENV_VARS="${ENV_VARS},CLOUD_SQL_CONNECTION_NAME=${CLOUD_SQL_CONNECTION_NAME}"
          
          # Add optional variables if set
          if [ -n "${WP_URL}" ]; then
            ENV_VARS="${ENV_VARS},WP_URL=${WP_URL}"
          fi
          if [ -n "${WP_TITLE}" ]; then
            ENV_VARS="${ENV_VARS},WP_TITLE=${WP_TITLE}"
          fi
          
          IMAGE_BASE="${REGION}-docker.pkg.dev/${PROJECT_ID}/wordpress/${SERVICE_NAME}"
          gcloud run deploy ${SERVICE_NAME} \
            --image ${IMAGE_BASE}:${GITHUB_SHA} \
            --region ${REGION} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "${ENV_VARS}" \
            --add-cloudsql-instances "${CLOUD_SQL_CONNECTION_NAME}" \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --max-instances 10 \
            --min-instances 0

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --region ${REGION} --format 'value(status.url)')
          echo "Service deployed to: ${SERVICE_URL}"
          echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_ENV

      - name: Deployment Summary
        run: |
          IMAGE_BASE="${REGION}-docker.pkg.dev/${PROJECT_ID}/wordpress/${SERVICE_NAME}"
          echo "## Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service Name:** ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${REGION}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${IMAGE_BASE}:${GITHUB_SHA}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${SERVICE_URL}" >> $GITHUB_STEP_SUMMARY

